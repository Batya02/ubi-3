from aiogram.types import (
        Message, InlineKeyboardMarkup, 
        InlineKeyboardButton
        )

from aiogram.dispatcher.storage import FSMContext

from objects.globals import dp
from objects import globals

from targs.attack import Attack
from formats.phone import phone_format
from temp.lang_keyboards import lang_keyboard
from states.states import Phone

from db_models.UserData import UserData

@dp.message_handler(lambda message: message.text == "üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä")
async def attack_phone(message: Message):
    user_data = await UserData.objects.filter(user_id=message.from_user.id).all()
    
    # User not in database
    if len(user_data) == 0:
        await UserData.objects.create(
            user_id=message.from_user.id, 
            status="30"
        )
        await message.answer(
            text="üü¢–ü—Ä–∏ 1-–æ–º –∑–∞–ø—É—Å–∫–µ –¥–∞–µ—Ç—Å—è 30 –∫—Ä—É–≥–æ–≤!"
        )

    await message.answer(
        text=f"–û—Ç–º–µ–Ω–∏—Ç—å /start\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–±–µ–∑ +):"
    )

    await Phone.get_phone_targ.set()

@dp.message_handler(
    lambda message: message.text not in [k[0] for k in lang_keyboard["RU"]],
    state=Phone.get_phone_targ
    )
async def get_phone_targ(message: Message, state:FSMContext):
    await state.finish()

    if message.text == "/start":
        return await message.answer(text="–û—Ç–º–µ–Ω–∞")

    elif not message.text.isdigit():
        return await message.answer(
            text="–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü—Ñ–∏—Ä—ã."
        )
    
    # Create new attack object.
    # params: user phone and user id
    globals.client_session_object = Attack(
            phone=phone_format(message.text),
            user_id=message.from_user.id)
    
    # set new object in variable
    globals.UserData = UserData

    # Attack stopped button
    stoped_attack = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(
                    text="‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stoped_attack"
                    )
            ]
        ]
    )

    await message.answer(
        "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É?", 
        reply_markup=stoped_attack
    )

    await globals.client_session_object.start(message)   