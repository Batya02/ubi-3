from aiogram.types import (
        Message, InlineKeyboardMarkup, 
        InlineKeyboardButton
        )

from objects.globals import dp
from objects import globals

from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from targs.attack import Attack

from formats.phone import phone_format

from db_models.UserData import UserData

class Phone(StatesGroup):
    get_phone_targ = State()

@dp.message_handler(lambda message: message.text == "üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä")
async def attack_phone(message: Message):
    user_data = await UserData.objects.filter(user_id=message.from_user.id).all()
    
    if user_data == []:
        await UserData.objects.create(
            user_id=message.from_user.id, 
            status="30"
        )
        await message.answer(
            text="–ü—Ä–∏ 1-–æ–º –∑–∞–ø—É—Å–∫–µ –¥–∞–µ—Ç—Å—è 30 –∫—Ä—É–≥–æ–≤!"
        )

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

    await Phone.get_phone_targ.set()

@dp.message_handler(state=Phone.get_phone_targ)
async def get_phone_targ(message: Message, state:FSMContext):
    await state.finish()

    if not message.text.isdigit():
        return await message.answer(
            text="–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü—Ñ–∏—Ä—ã."
        )
        
    globals.client_session_object = Attack(
            phone=phone_format(message.text),
            user_id=message.from_user.id)
    globals.UserData = UserData

    stoped_attack = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(
            text="‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stoped_attack"
        )]]
    )

    await message.answer(
        "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É?", 
        reply_markup=stoped_attack
    )

    await globals.client_session_object.start(message)   